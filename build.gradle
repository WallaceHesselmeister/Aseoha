buildscript {
	repositories {
		// These repositories are only for Gradle plugins, put any other repositories in the repository block further below
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
		mavenCentral()
	}
	dependencies {
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
	}
}

plugins {
	id 'eclipse'
	id 'idea'
	id "io.freefair.lombok" version "8.12.2.1"
	id("com.diffplug.spotless") version "7.0.4"
	id 'net.minecraftforge.gradle' version '6.0+'
	id 'org.spongepowered.mixin' version '0.7.+'
}


group = mod_group_id
version = mod_version

base {
	archivesName = mod_id
}

java {
	toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
	mappings channel: mapping_channel, version: mapping_version

	copyIdeResources = true

	runs {
		configureEach {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'


			property 'forge.logging.console.level', 'debug'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		client {
			workingDirectory project.file('run')
			jvmArg "-XX:+AllowEnhancedClassRedefinition"
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			property 'forge.enabledGameTestNamespaces', mod_id
			mods {
				examplemod {
					source sourceSets.main
				}
			}
		}

		server {
			property 'forge.enabledGameTestNamespaces', mod_id
			args '--nogui'
		}

		gameTestServer {
			property 'forge.enabledGameTestNamespaces', mod_id
		}

		data {
			workingDirectory project.file('run-data')

			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
		}
	}
}

mixin {
	add sourceSets.main, "${mod_id}.refmap.json"

	config "${mod_id}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven { url "https://www.cursemaven.com" }

	maven {
		name "reposiliteRepository"
		url "https://maven.tardismod.net/releases"
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	implementation fg.deobf("net.tardismod:TardisMod:${tardis_mod_version}")
//	implementation fg.deobf("curse.maven:new-tardis-mod-290247:6685059")
	implementation fg.deobf("curse.maven:create-328085:6641603")
	implementation fg.deobf("curse.maven:create-connected-947914:6650193")
	implementation fg.deobf("curse.maven:embeddium-908741:5681725")
	implementation fg.deobf("curse.maven:free-cam-557076:4643128")
	implementation fg.deobf("curse.maven:controlling-250398:4646682")
	implementation fg.deobf("curse.maven:searchables-858542:5284015")
	implementation fg.deobf("curse.maven:configured-457570:5180900")
	implementation fg.deobf("curse.maven:xaeros-minimap-263420:6515024")
	implementation fg.deobf("curse.maven:xaeros-world-map-317780:6538337")
	implementation fg.deobf("curse.maven:jei-238222:6600311")
	implementation fg.deobf("curse.maven:worldedit-225608:4586218")
	implementation fg.deobf("curse.maven:jade-324717:6271651")

	annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
	compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.5.0"))

	compileOnly 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'
	implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.5.0")) {
		jarJar.ranged(it, "[0.5.0,)")
	}
}

/* IntelliJ Project Import
 * The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
 * Thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
 */
if (System.getProperty("idea.sync.active") == "true") {
	afterEvaluate {
		tasks.withType(JavaCompile).all {
			it.options.annotationProcessorPath = files()
		}
	}
}


tasks.named('processResources', ProcessResources).configure {
	var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
							forge_version       : forge_version, forge_version_range: forge_version_range,
							loader_version_range: loader_version_range,
							mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
							mod_authors         : mod_authors, mod_description: mod_description,
							tardis_mod_version : tardis_mod_version]

	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

tasks.named('jar', Jar).configure {
	manifest {
		attributes(["Specification-Title"     : mod_id,
					"Specification-Vendor"    : mod_authors,
					"Specification-Version"   : "1", // We are version 1 of ourselves
					"Implementation-Title"    : project.name,
					"Implementation-Version"  : project.jar.archiveVersion,
					"Implementation-Vendor"   : mod_authors,
					"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
				"MixinConfigs": "${mod_id}.mixins.json"])
	}

	finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '.gitattributes', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		leadingSpacesToTabs() // or leadingTabsToSpaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		removeUnusedImports()

		importOrder('java', 'javax', '', 'net.minecraft', 'net.tardis', group)

		trimTrailingWhitespace()

		palantirJavaFormat()
		licenseHeader '/* (C) TAMA Studios $YEAR */'
	}
	json {
		target 'src/main/resources/data/aseoha/**/*.json'                // you have to set the target manually
		jackson()                 // optional: add a whitespace before key separator. False by default
				.feature('INDENT_OUTPUT', true)                // optional: true by default
				.feature('ORDER_MAP_ENTRIES_BY_KEYS', true)    // optional: false by default
//		jsonPatch([])
	}
}
