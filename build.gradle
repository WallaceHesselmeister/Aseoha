buildscript {
    ext.kotlin_version = '1.9.23'
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url='https://repo.spongepowered.org/repository/maven-public' }
        mavenCentral()
//        jcenter()
//        maven {url='https://dist.creeper.host/Sponge/maven'}
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'kotlin'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
//apply plugin: 'intellij'
apply plugin: 'maven-publish'
//tm_version = '1.5.4'
version = "${ModVer}"
group = 'tamastudiosaseoha' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'aseoha'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

tasks.withType(ProcessResources).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

configurations {
    implementation.extendsFrom shadow
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.16.5'
    //mappings channel: 'snapshot', version: 'map-1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.


    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=aseoha.mixins.json"
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                aseoha {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                aseoha {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
            //mixin
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'aseoha', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                aseoha {
                    source sourceSets.main
                }
            }
        }
    }

}
mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    add sourceSets.main, "${mod_id}.tacompat.refmap.json"
    disableOverwriteChecker = true
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
//repositories {
//  maven {
//        url "https://cursemaven.com"
//    }
//}
repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url "https://cursemaven.com" }
    maven { url "https://dvs1.progwml6.com/files/maven/" } // JEI Maven
}

//dependencies {}
def var = dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is  a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.34'
    /************************************ Mixins *********************************************/
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    shadow(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.6")) // Mixin Extras
    implementation "org.spongepowered:mixin:${mixin_version}"
    /************************************ New TARDIS Mod *********************************************/
    implementation fg.deobf("curse.maven:new-tardis-mod-290247:3667066")
    /************************************ JEI *********************************************/
    compileOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.153:api") // JEI API for compilation
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.153") // Full JEI for runtime
    /************************************ Mekanism *********************************************/
    implementation fg.deobf("curse.maven:mekanism-268560:3659389") // Mekanism
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    /************************************ Temporal API *****************************************/
    implementation fg.deobf("curse.maven:temporalapi-1056469:5967827")
    /************************************ Create *********************************************/
    implementation fg.deobf("curse.maven:create-328085:3536025")
    implementation fg.deobf("curse.maven:flywheel-486392:3535459")
    ////////////////// Disable these when running datagen ////////////////////
//    implementation fg.deobf("curse.maven:embeddium-908741:5322311")
//    implementation fg.deobf("curse.maven:rubidium-extra-654373:4823321")
    //////////////////////////////////////////////////////////////////////////
    implementation fg.deobf("curse.maven:jade-324717:3910873")
    //implementation fg.deobf("curse.maven:essential-mod-546670:6403733")
    /************************************ Cracker's Witherstorm *********************************************/
//    implementation fg.deobf("curse.maven:crackers-wither-storm-mod-621405:4403153")
    /************************************ Temporal Additions ************************************************/
    implementation fg.deobf("curse.maven:t-additions-804564:6090728")
    /************************************ GeckoLib **********************************************************/
    implementation fg.deobf("curse.maven:geckolib-388172:4182600")
    /************************************ LomBok ************************************************************/
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}
var
shadowJar {
    configurations = [project.configurations.shadow]
    relocate("com.llamalad7.mixinextras", "com.code.aseoha.mixin.mixinextras")
    mergeServiceFiles()
}

//dependencies {
//    implementation fg.deobf("curse.maven:temporalapi-1056469:5498125")
//    implementation fg.deobf("com.gitlab.Spectre0987:TardisMod-1-14:${tm_version}")
//}
// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "aseoha",
                "Specification-Vendor": "tamaaseoha",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${ModVer}",
                "Implementation-Vendor" :"TAMA",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "MixinConfigs": "aseoha.mixins.json,aseoha.tacompat.mixins.json"
        ])
    }
    rename 'aseoha.refmap.json', 'aseoha.mixin-refmap.json'
    rename 'aseoha.tacompat.refmap.json', 'aseoha.tacompat.mixin-refmap.json'
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}